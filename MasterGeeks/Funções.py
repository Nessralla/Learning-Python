#Obt√©m 2 n√∫meros inteiros.
a = int(input('Digite o 1¬∫ n√∫mero: \t')) #Obs. Assim como '\n' o comando '\t'
b = int(input('Digite o 2¬∫ n√∫mero: \t')) #Tamb√©m edita o texto.
                                        #S√≥ que ao inv√©s de pular linha, ele
                                        #Adiciona um espa√ßo em branco de  
                                        #aproximadamente cinco caracteres.

#E depois exibimos a soma deles.
print(f'\nA soma desses dois n√∫meros √©: {a+b}')

#Quando o usu√°rio quiser, ele pode apertar Enter ou qualquer outro bot√£o
#para continuar a execu√ß√£o do programa.
input('\nAperte enter para continuar \n')

a = int(input('Digite o 3¬∫ n√∫mero: \t'))
b = int(input('Digite o 4¬∫ n√∫mero: \t'))

print(f'\nA multiplica√ß√£o desses dois n√∫meros √©: {a*b}')

def continuar(): #<- Nossa 3¬∫ rotina, se transformou na fun√ß√£o ‚ÄúContinuar‚Äù
 input('\nAperte enter para continuar \n')

a = int(input('Digite o 1¬∫ n√∫mero: \t'))
b = int(input('Digite o 2¬∫ n√∫mero: \t'))

print(f'\nA soma desses dois n√∫meros √©: {a+b}')

continuar() #<- E ao ser chamada, ela executa os comandos que est√£o dentro dela.


a = int(input('Digite o 3¬∫ n√∫mero: \t'))
b = int(input('Digite o 4¬∫ n√∫mero: \t'))

print(f'\nA multiplica√ß√£o desses dois n√∫meros √©: {a*b}')

#criando a fun√ß√£o hipotenusa

def medirHipotenusa():
 b = int(input("\nDigite um n¬∫ \n"))
 c = int(input("\nDigite um n¬∫ \n"))

 a = int(((b**2) + (c**2))**0.5)

 print(f'\nO valor da hipotenusa √©: {a}')

medirHipotenusa()

#referenciando fun√ß√µes

def mostrarBatatas():
   print('batatas: doces, fritas, cozinhas ou esmagadas.')
   
mb = mostrarBatatas

#A vari√°vel mb √© uma refer√™ncia da fun√ß√£o mostrarBatatas.
mb()

print(f'O que tem dentro de [mb]?:\n{mb}\n')


print(f'Tipo     [mb]: {type(mb)}')

print(f'Indice   [mb]: {id(mb)}\n')

print(f'Tipo   [mostrarBatatas]: {type(mostrarBatatas)}')

print(f'Indice [mostrarBatatas]: {id(mostrarBatatas)}')


import random

for i in range(1,6):
 #Randint -> Sorteia um n¬∫ inteiro entre x e y
 a = random.randint(0,10) #neste caso, x = 0 e y = 10

 #Exibe esse n¬∫ na tela.
 print(f'{i}¬∫ n¬∫: {a}')

 
#def medidaHip(b, c):
 #Usa os valores de b e c na f√≥rmula e devolve o resultado.
# return int(((b**2) + (c**2))**0.5)

#print('''
#Considerando que um tri√¢ngulo ret√¢ngulo (‚ó£) possui tr√™s lados (A, B e C)
#e que "B" e "C" s√£o catetos, elabore um programa que receba as suas medidas,
#
#calcule e exiba o valor da hipotenusa.
#
#f√≥rmula: (a¬≤ = b¬≤ + c¬≤)
#''')

#Pega os valores com o usu√°rio
#cateto_b = int(input("\nDigite o tamanho do lado B: \n"))
#cateto_c = int(input("\nDigite o tamanho do lado C: \n"))

#Depois envia eles para a fun√ß√£o e aguarda o resultado.
#hip_a = medidaHip(cateto_b, cateto_c)

#print(f'\nA medida da hipotenusa √©: {hip_a};')

numeros = [1,2,3,4,5,6,7,8,9]

#Soma todos os elementos da lista n√∫meros:
print(sum(numeros)) #Obs. o resultado dessa conta √© 45

#Para usar uma vari√°vel como empacotador, basta

#adicionar um asterisco (*) antes do seu nome.

def soma(* num:int) -> int:
 '''
   A fun√ß√£o Soma() recebe N n√∫meros inteiros e retorna a soma de todos eles.


    Exemplo 01: soma(1,2)   -> 3

    Exemplo 02: soma(3,4,5) -> 12


    f√≥rmula: s = y + ‚Ä¶ N
 '''
 resultado = 0

 for n in num:
   
   resultado += n

 return resultado

#Passando diferentes quantidades de par√¢metros para fun√ß√£o Soma():
print('Somando 1 Par√¢metro ', soma(0)      ) #0
print('Somando 2 Par√¢metros', soma(1, 2)   ) #3
print('Somando 3 Par√¢metros', soma(3, 4, 5)) #12
print('Somando 4 Par√¢metros', soma(6,7,8,9)) #30

def exemplo (* letras:str) -> list:
        return list(letras)

#caps √© uma palavra-chave ou par√¢metro nomeado, cujo valor padr√£o √© False.

def acheABatata(* listaPalavras: str, caps = False) -> str:
 '''
   Essa fun√ß√£o recebe N palavras e busca pela posi√ß√£o da palavra
   'batata'. Mas caso o valor de caps seja True, ela vai

    buscar por 'Batata', com 'B' mai√∫sculo.

   Exemplo:
     acheABatata('a, batata','ma√ßa')
     retorna: 'batata' √© a 2¬∫ palavra!


      acheABatata('U','Ma√ßa', 'Batata', caps = True)
     retorna: 'Batata' √© a 3¬∫ palavra!


      acheABatata('U','Ma√ßa', 'Cebola', caps = True)
     retorna: 'N√£o h√° uma Batata nessa lista T.T'  
 '''
 if caps == True:

     

        batata = 'Batata'
 else:

        batata = 'batata'

     

 if batata in listaPalavras:

     

        idBatata = listaPalavras.index(batata)

   

        return f'Batata √© a {idBatata+1} palavra!'

   

 else:

        return f'N√£o h√° uma {batata} nessa lista T.T'



#Depois que todos os valores desejados s√£o passados, podemos mudar o valor da palavra-chave

#chamando por ela.
print(acheABatata('Uva','Pera','Batata', caps = True))

#Emoticon √© a vari√°vel opcional desta fun√ß√£o.

def mensagem(msg:str, emoticon = ' '):
 '''
 Essa fun√ß√£o exibe uma mensagem para o usu√°rio. Se desejar,
 ela tamb√©m pode exibir um emoticon.
 '''

 print(f'\n{msg}')

  #Ent√£o por padr√£o a mensagem sempre ser√° exibida sem um emoticon,

  #Mas se o usu√°rio inserir um valor diferente do padr√£o.
 if emoticon != ' ':
   print(f'\n{emoticon}') #Esse emoticon vai aparecer na tela.

mensagem('Ol√° Mundo')
mensagem('Tudo bem?', 'üòÑ')

#Obs.
#No Windows, ao pressionar as teclas (Windows + '.') uma lista de emoticons

#como este üòç surgir√° e voc√™ pode us√°-los em quase todos os campos de texto.

#O 1¬∫ par√¢metro dessa fun√ß√£o √© o X e o 2¬∫ √© o Y.

def test(x,y):
   print(f'X:{x} / Y:{y} | A Soma de XY √©: {x+y}')

#Ent√£o pela posi√ß√£o dos valores, sabemos que X √© igual a 5 e Y √© igual a 3.    
test(5,3)

#Mas podemos inverter a ordem, passando esses valores pelo nome dos seus par√¢metros.
test(y = 2, x = 4)